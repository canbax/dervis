CREATE QUERY tg_jaccard_nbor_ss (VERTEX source, STRING vertexType, INT top_k = 100) FOR GRAPH derman {
 
/* 
Calculates the Jaccard Similarity between a given vertex and every other vertex.
  Jaccard similarity = intersection_size / (size_A + size_B - intersection_size)
Parameters:
 source: start vertex                           top_k: #top scores to report
 e_type: directed edge types to traverse        print_accum: print JSON output
 rev_e_type: reverse edge types to traverse     file_path: file to write CSV output to
 similarity_edge_type: edge type for storing vertex-vertex similarity scores

  This query current supports only a single edge type (not a set of types) - 8/13/20
*/

  SumAccum<INT> @sum_intersection_size, @@sum_set_size_A, @sum_set_size_B;
  SumAccum<FLOAT> @sum_similarity;
  
  Start (ANY) = {source};
  Start = SELECT s
    FROM Start:s
    ACCUM @@sum_set_size_A += s.outdegree();
  
  Subjects = SELECT t
       FROM Start:s-(:e)-:t;

  Others = SELECT t
     FROM Subjects:s -(:e)- :t
     WHERE t != source AND t.type == vertexType
     ACCUM 
         t.@sum_intersection_size += 1,
         t.@sum_set_size_B = t.outdegree()
     POST-ACCUM 
        IF (@@sum_set_size_A + t.@sum_set_size_B - t.@sum_intersection_size) == 0 THEN
         t.@sum_similarity = 0
        ELSE
          t.@sum_similarity = t.@sum_intersection_size*1.0/(@@sum_set_size_A + t.@sum_set_size_B - t.@sum_intersection_size)
        END
     ORDER BY t.@sum_similarity DESC
     LIMIT top_k;
 
  PRINT Others[Others.@sum_similarity];
}